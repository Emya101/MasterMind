//Emhenya Supreme
//

import java.util.Scanner;
import java.util.Random;
/**
 * The Game class represents a game of Matermind, a guessing game where players try to guess
 * a sequence of colors generated by the system.
 */
public class Game{
/**
     * The main method of the game. It initializes the game, generates random colors, prompts the player
     * for guesses, and evaluates the guesses.
     *
     * @param args The command-line arguments.
     */
    public static void main(String[] args){
       ArrayList<Peg> colors=new ArrayList<>();

       ArrayList<String> expand=new ArrayList<>(6);//default size of array is 6
       
       for (int i = 0; i < 12; i++) {
        expand.add("Element " + i);
    }
    System.out.println("Size: " + expand.size());
    System.out.println(expand);//adding more than 6 elements resized the array to 12 in capacity

    for (int i = 0; i < 10; i++) {
        expand.remove(0);
    }
    System.out.println("Size: " + expand.size());
    System.out.println(expand);
       getRandomColors(colors);
       System.out.println(colors);
        System.out.println("Enter your list");
        getGuess(colors);
    }

/**
     * Generates random colors and adds them to the specified list.
     *
     * @param colors The list to which random colors will be added.
     */
public static void getRandomColors(ArrayList<Peg> colors){
    Random rand=new Random();
    for(int i=0;i<4;i++){
        int index=rand.nextInt(6);
    switch(index){
        case 0:
        colors.add(new Peg(Colour.RED));
        break;
        case 1:
        colors.add(new Peg(Colour.BLUE));
        break;
        case 2:
        colors.add(new Peg(Colour.GREEN));
        break;
        case 3:
        colors.add(new Peg(Colour.YELLOW));
        break;
        case 4:
        colors.add(new Peg(Colour.WHITE));
        break;
        case 5:
        colors.add(new Peg(Colour.BLACK));
        break;
        default:
                throw new IllegalStateException("Unexpected value: " + index);
        }
    }

}
 /**
     * Prompts the player for guesses, evaluates the guesses, and provides feedback to the player.
     *
     * @param colorlist The list of colors to guess.
     */
public static void getGuess(ArrayList<Peg> colorlist) {
    Scanner kb = new Scanner(System.in);
    ArrayList<Peg> guesses = new ArrayList<>();
    boolean Identical=false;
    boolean Gameover=false;
    for(int counter=1;counter<=11;counter++){
        System.out.println("System:\t\tGuess # "+counter+":");
        System.out.print("Player:\t\t");
        while(guesses.size()!=0){
                guesses.remove(0);
            }
    while (true) {
        String input = kb.nextLine();
        String[] colors = input.split(" ");

        // Check if exactly 4 colors are entered
        if (colors.length != 4) {
            System.out.println("Please enter exactly four colors.");
            continue; // Restart the loop
        }

        // Process each color in the input
        boolean validGuess = true;
        for (String color : colors) {
            try {
                Colour colour = Colour.valueOf(color.trim().toUpperCase());
                guesses.add(new Peg(colour));
            } catch (IllegalArgumentException e) {
                System.out.println("Invalid color: " + color);
                validGuess = false;
                break; // Exit the loop and prompt for input again
            }
        }

        if (validGuess) {
            break; // Exit the loop if all colors are valid and there are exactly 4 of them
        }
        else{
            counter=12;
            break;
        }
    }

    if(colorlist.equals(guesses)){
        Identical=true;
        break;
    }
    else if(guesses.size()!=4){
        Gameover=true;
        break;
    }
    else{
        ArrayList<String> Result=GiveResult(colorlist, guesses);
        PrintResult(Result);
    }

}
if (Identical||!(Gameover)){
    System.out.println("You cracked the code!");
}
else{
    System.out.println("Total number of guesses exhausted,System Wins\nGame Over!");
}
}
/**
     * Generates the result based on the guessed colors and the actual colors.
     *
     * @param colors  The list of actual colors.
     * @param guesses The list of guessed colors.
     * @return The result of the comparison between actual colors and guessed colors.
     */
private static ArrayList<String> GiveResult(ArrayList<Peg> colors,ArrayList<Peg> guesses){
    ArrayList<String> Result=new ArrayList<>();
    ArrayList<Peg> unequalColor=new ArrayList<>();
    ArrayList<Peg> unequalGuess=new ArrayList<>();
    ArrayList<Peg> temp=new ArrayList<>();
    for (int i=0;i<4;i++){
        temp.add(i,guesses.get(i));
    }
    int count=0;

    for(Peg Color: colors){
        if(Color.equals(guesses.get(count))){
            Result.add("x");
        }
        else{
            unequalColor.add(Color);
            unequalGuess.add(guesses.get(count));
        }
        count++;
    }

    for(Peg unColor: unequalColor ){
        int colorCount=0;
        for(Peg unGuess: unequalGuess){
            if(unColor.equals(unGuess)){
                unequalColor.remove(colorCount);
                Result.add("o");
                colorCount++;
                break;

            }
            
        }
        
    }

    while(Result.size()<4){
        Result.add("-");
    }
return Result; 
}

/**
     * Prints the result of the comparison between actual colors and guessed colors.
     *
     * @param Result The result to be printed.
     */
private static void PrintResult(ArrayList<String> Result){
System.out.print("System:\t\t");
System.out.println(Result.get(0)+" "+Result.get(1));
System.out.println("\t\t"+Result.get(2)+" "+Result.get(3));
}
}
